#!/usr/bin/env python3

import json
import os
import sys

try:
    import click
except ImportError:
    print("{}: Missing \"click\" package. Install from <https://pypi.org/project/click/>".format(sys.argv[0]), file = sys.stderr)
    sys.exit(1)

PRUNE_COMPILER_FLAGS = [
    # This flag causes major issues with Clang. Having this flag present in the
    # JSON compilation database results in fatal errors
    "-save-temps"
]

@click.command(context_settings = dict(help_option_names = ['-h', '--help']))
@click.option('-i', '--input-file', 'input_file',
              type = click.Path(exists = True,
                                file_okay = True,
                                dir_okay = False,
                                readable = True,
                                allow_dash = False,
                                resolve_path = True),
              help = 'Input file.', required = True, multiple = False)
@click.option('-d', '--directory', 'directory',
              type = click.Path(exists = True,
                                file_okay = False,
                                dir_okay = True,
                                allow_dash = False,
                                resolve_path = True),
              help = 'Build directory.', required = True, multiple = False)
@click.option('-o', '--output-cdb', 'out_stream', type = click.File('a+'),
              help = 'Output compile DB.', required = True, multiple = False)
@click.argument('flags', nargs = -1, type = click.UNPROCESSED)
def cli(input_file, directory, out_stream, flags):
    def build_cdb(out_stream):
        try:
            out_stream.seek(0)
            return json.load(out_stream)
        except Exception as exception:
            return []

    def write_cdb(cdb, out_stream, pretty_print = True):
        out_stream.seek(0)
        out_stream.truncate()
        json.dump(cdb, out_stream, indent = (4 if pretty_print else None))

    def prune_flags(flags):
        return tuple([flag for flag in flags if flag not in PRUNE_COMPILER_FLAGS])

    def new_cdb_entry(input_file, directory, flags):
        return {
            'file': input_file,
            'directory': directory,
            'arguments': list(flags)
        }

    def append_cdb(cdb, new_cdb_entry):
        return [cdb_entry for cdb_entry in cdb
                if cdb_entry['file'] != new_cdb_entry['file']] + [new_cdb_entry]

    # Parse output CDB
    cdb = build_cdb(out_stream)
    # print("cdb: {}".format(cdb))
    pruned_flags = prune_flags(flags)
    # print("pruned_flags: {}".format(pruned_flags))
    cdb_entry = new_cdb_entry(input_file, directory, pruned_flags)
    # print("cdb_entry: {}".format(cdb_entry))
    updated_cdb = append_cdb(cdb, cdb_entry)
    # print("updated_cdb: {}".format(updated_cdb))
    if len(updated_cdb) > len(cdb):
        write_cdb(updated_cdb, out_stream, pretty_print = False)

if __name__ == "__main__":
    cli()
